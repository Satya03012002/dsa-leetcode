\*class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        
        
		 int i = 0;
		 while(i < nums.length) {
			 int correctIndex = nums[i] - 1;
			 if(nums[i] != nums[correctIndex] ) {
				 swapArray(nums, i , correctIndex);
			 }
			 else {
				 i++;
			 }
		 }
	 
		System.out.println(Arrays.toString(nums));
		List<Integer> list = new ArrayList<>();
		
		for(int j = 0; j < nums.length; j++) {
			if(nums[j] != j+1) {
				list.add(nums[j]);
				
			}
			
		}
		return list;
		
    }
    static void swapArray(int[] arr, int first, int second) {
		int temp = arr[first];
		arr[first] = arr[second];
		arr[second] = temp;
	}
 } */
 
 class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        i = 0
        def swap(nums,a,b):
            temp = nums[a]
            nums[a] = nums[b]
            nums[b] = temp 
        for x in nums:
            
            if x == i+1:
                
                i = i+1
                continue
            else:
                while x != i+1:
                   
                    if nums[x-1] == nums[i]:
                       
                        return x
                    else:
                        
                        swap(nums, x-1, i)
                       
                        x = nums[i]
                i = i+1
        

